<?php

/**
 * Widmo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    onko_gliwice
 * @subpackage model
 * @author     Paweł Dawczak pawel.dawczak@gmail.com
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Widmo extends BaseWidmo
{
  const WZGORZE     = 'wz';
  const POTYLICZNA  = 'isp';
  const CZOLOWA     = 'isc';

  protected $labels = array(
    'wz'  => 'Wzgórze',
    'isp' => 'Istota szara potyliczna',
    'isc' => 'Istota szara czołowa'
  );

  protected $choord_skala_ppm     = 0;
  protected $choord_widmo         = 0;
  protected $choord_linia_bazowa  = 0;

  protected $skala_ppm            = array();
  protected $widmo                = array();
  protected $linia_bazowa         = array();
  protected $widmo_bazowa         = array();

  public function addData(array $row)
  {
    $this->skala_ppm[]      = (double) $row[$this->choord_skala_ppm];
    $this->widmo[]          = (double) $row[$this->choord_widmo];
    $this->linia_bazowa[]   = (double) $row[$this->choord_linia_bazowa];
    $this->widmo_bazowa[]   = (double) $row[$this->choord_widmo] - (double) $row[$this->choord_linia_bazowa];
  }

  /**
   * @return array
   */
  public function getLabels()
  {
    return $this->labels;
  }

  /**
   * @return array of raw data
   */
  public function getRawData()
  {
    return array(
      'skala_ppm'     => $this->skala_ppm,
      'widmo'         => $this->widmo,
      'linia_bazowa'  => $this->linia_bazowa,
      'widmo_bazowa'  => $this->widmo_bazowa
    );
  }

  /**
   * Returns imploded data
   * @param array $data
   * @return string
   */
  protected function concrete(array $data)
  {
    return implode(';', $data);
  }

  /**
   * Sets values from variables
   */
  public function concreteData()
  {
    $this->setSkalaPpm($this->concrete($this->skala_ppm));
    $this->setWidmo($this->concrete($this->widmo));
    $this->setLiniaBazowa($this->concrete($this->linia_bazowa));
    $this->setWidmoBazowa($this->concrete($this->widmo_bazowa));
  }

  /**
   * @param array $params
   */
  public function setParamsFromArray(array $params)
  {
    $this->setTe($params['te']);
    $this->setTr($params['tr']);
    $this->setNs($params['ns']);
  }

  //////////////////////////////////////////////////////////////////////////////
  // PARSING PARAMETERS
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Extracts parameters from content of file
   * @param string $content
   * @return array
   */
  public static function parseParams($content)
  {
    $temp = explode("\n", $content);

    $params = array(
      'wz'  => self::extractParams($temp[4]),
      'isp' => self::extractParams($temp[41]),
      'isc' => self::extractParams($temp[78])
    );
    
    return $params;
  }

  public static function extractParams($text)
  {
    $start  = strpos($text, '=', 10) + 1;
    $stop   = strpos($text, ' ', $start);
    $length = $stop - $start;

    $vars   = substr($text, $start, $length);
    $vars   = explode('/', $vars);

    $return = array(
      'te'  => $vars[0],
      'tr'  => $vars[1],
      'ns'  => $vars[2]
    );

    return $return;
  }

  /**
   * Sets parameters from array that comes from Widmo::parseParams
   * @param array $params
   * @param WidmoWzgorze $wz
   * @param WidmoIstotaSzaraPotyliczna $isp
   * @param WidmoIstotaSzaraCzolowa $isc
   */
  public static function setParams(array $params, WidmoWzgorze $wz, WidmoIstotaSzaraPotyliczna $isp, WidmoIstotaSzaraCzolowa $isc)
  {
    $wz->setParamsFromArray($params['wz']);
    $isp->setParamsFromArray($params['isp']);
    $isc->setParamsFromArray($params['isc']);
  }

  //////////////////////////////////////////////////////////////////////////////
  //  PARSING COORD FILE
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Converts file into array
   * @param string $content
   * @return array 
   */
  public static function getRawArrayFromCoordFile($content)
  {
    $temp = str_replace(',', '.', $content);
    $temp = explode("\n", $temp);
    unset ($temp[0]);
    return $temp;
  }

  public static function processExtractingData(array $data, WidmoWzgorze $wz, WidmoIstotaSzaraPotyliczna $isp, WidmoIstotaSzaraCzolowa $isc)
  {
    foreach ($data as $line)
    {
      if ('' == trim($line))
      {
        continue;
      }

      $tmp = explode(' ; ', $line);

      Widmo::parseToData($tmp, $wz, $isp, $isc);
    }

    $wz->concreteData();
    $isp->concreteData();
    $isc->concreteData();
  }

  public static function parseToData(array $row, WidmoWzgorze $wz, WidmoIstotaSzaraPotyliczna $isp, WidmoIstotaSzaraCzolowa $isc)
  {
    $wz->addData($row);
    $isp->addData($row);
    $isc->addData($row);
  }

  //////////////////////////////////////////////////////////////////////////////
  //  PARSING SPREADSHEED FILE
  //////////////////////////////////////////////////////////////////////////////
  public static function parseSpreadsheet($content)
  {
    $tmp = explode("\n", $content);
    $labels = array(null, 'wz', 'isp', 'isc', null);
//    unset ($tmp[0]);
    for ($i = 0; $i < count($tmp); $i++)
    {
      $tmp[$i]  = str_replace(' ', '', $tmp[$i]);
      $start    = strpos($tmp[$i], ';') + 1;
      $tmp[$i]  = substr($tmp[$i], $start);
      $tmp[$labels[$i]] = $tmp[$i];
      unset ($tmp[$i]);
    }
    return $tmp;
  }

  public static function setConcetrations(array $concetrations, WidmoWzgorze $wz, WidmoIstotaSzaraPotyliczna $isp, WidmoIstotaSzaraCzolowa $isc)
  {
    $wz->setStezenia($concetrations['wz']);
    $isp->setStezenia($concetrations['isp']);
    $isc->setStezenia($concetrations['isc']);
  }

  public function __toString()
  {
    return $this->labels[$this->lokalizacja];
  }
  
}
